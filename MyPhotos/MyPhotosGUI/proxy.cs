//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPhotos
{
    using DocumentFormat.OpenXml.Wordprocessing;
    using System.Runtime.Serialization;
    using System.Security.Cryptography.Xml;

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos", IsReference=true)]
    public partial class Photo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DateField;
        
        private string DescriptionField;
        
        private MyPhotos.Folder[] FoldersField;
        
        private string LocationField;
        
        private string NameField;
        
        private string PathField;
        
        private System.Guid PhotoIdField;
        
        private MyPhotos.User UserField;
        
        private System.Guid UserUserIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.Folder[] Folders
        {
            get
            {
                return this.FoldersField;
            }
            set
            {
                this.FoldersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PhotoId
        {
            get
            {
                return this.PhotoIdField;
            }
            set
            {
                this.PhotoIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.User User
        {
            get
            {
                return this.UserField;
            }
            set
            {
                this.UserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserUserId
        {
            get
            {
                return this.UserUserIdField;
            }
            set
            {
                this.UserUserIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos", IsReference=true)]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string EmailField;
        
        private string FirstNameField;
        
        private MyPhotos.Folder[] FoldersField;
        
        private string LastNameField;
        
        private string PasswordField;
        
        private MyPhotos.Photo[] PhotosField;
        
        private System.Guid UserIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.Folder[] Folders
        {
            get
            {
                return this.FoldersField;
            }
            set
            {
                this.FoldersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.Photo[] Photos
        {
            get
            {
                return this.PhotosField;
            }
            set
            {
                this.PhotosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId
        {
            get
            {
                return this.UserIdField;
            }
            set
            {
                this.UserIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Folder", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos", IsReference=true)]
    public partial class Folder : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid FolderIdField;
        
        private string NameField;
        
        private string PathField;
        
        private MyPhotos.Photo[] PhotosField;
        
        private MyPhotos.User UserField;
        
        private System.Guid UserUserIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FolderId
        {
            get
            {
                return this.FolderIdField;
            }
            set
            {
                this.FolderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.Photo[] Photos
        {
            get
            {
                return this.PhotosField;
            }
            set
            {
                this.PhotosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.User User
        {
            get
            {
                return this.UserField;
            }
            set
            {
                this.UserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserUserId
        {
            get
            {
                return this.UserUserIdField;
            }
            set
            {
                this.UserUserIdField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMyPhotos")]
public interface IMyPhotos
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/UpdateFolder", ReplyAction="http://tempuri.org/InterfaceFolder/UpdateFolderResponse")]
    void UpdateFolder(System.Guid id, string name, string path, MyPhotos.Photo[] photos);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/UpdateFolder", ReplyAction="http://tempuri.org/InterfaceFolder/UpdateFolderResponse")]
    System.Threading.Tasks.Task UpdateFolderAsync(System.Guid id, string name, string path, MyPhotos.Photo[] photos);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/DeleteFolder", ReplyAction="http://tempuri.org/InterfaceFolder/DeleteFolderResponse")]
    bool DeleteFolder(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/DeleteFolder", ReplyAction="http://tempuri.org/InterfaceFolder/DeleteFolderResponse")]
    System.Threading.Tasks.Task<bool> DeleteFolderAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/GetFolders", ReplyAction="http://tempuri.org/InterfaceFolder/GetFoldersResponse")]
    MyPhotos.Folder[] GetFolders();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/GetFolders", ReplyAction="http://tempuri.org/InterfaceFolder/GetFoldersResponse")]
    System.Threading.Tasks.Task<MyPhotos.Folder[]> GetFoldersAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/GetFolderById", ReplyAction="http://tempuri.org/InterfaceFolder/GetFolderByIdResponse")]
    MyPhotos.Folder GetFolderById(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/GetFolderById", ReplyAction="http://tempuri.org/InterfaceFolder/GetFolderByIdResponse")]
    System.Threading.Tasks.Task<MyPhotos.Folder> GetFolderByIdAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotoById", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotoByIdResponse")]
    MyPhotos.Photo GetPhotoById(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotoById", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotoByIdResponse")]
    System.Threading.Tasks.Task<MyPhotos.Photo> GetPhotoByIdAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotoByName", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotoByNameResponse")]
    MyPhotos.Photo GetPhotoByName(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotoByName", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotoByNameResponse")]
    System.Threading.Tasks.Task<MyPhotos.Photo> GetPhotoByNameAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetGuidByName", ReplyAction="http://tempuri.org/InterfacePhoto/GetGuidByNameResponse")]
    System.Guid GetGuidByName(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetGuidByName", ReplyAction="http://tempuri.org/InterfacePhoto/GetGuidByNameResponse")]
    System.Threading.Tasks.Task<System.Guid> GetGuidByNameAsync(string name);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotos", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotosResponse")]
    MyPhotos.Photo[] GetPhotos();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotos", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotosResponse")]
    System.Threading.Tasks.Task<MyPhotos.Photo[]> GetPhotosAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/DeletePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/DeletePhotoResponse")]
    bool DeletePhoto(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/DeletePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/DeletePhotoResponse")]
    System.Threading.Tasks.Task<bool> DeletePhotoAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/UpdatePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/UpdatePhotoResponse")]
    void UpdatePhoto(System.Guid id, string name, string location, string description, string path, System.DateTime date, MyPhotos.Folder[] folders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/UpdatePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/UpdatePhotoResponse")]
    System.Threading.Tasks.Task UpdatePhotoAsync(System.Guid id, string name, string location, string description, string path, System.DateTime date, MyPhotos.Folder[] folders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/AddPhoto", ReplyAction="http://tempuri.org/InterfacePhoto/AddPhotoResponse")]
    void AddPhoto(string name, string location, string description, string path, System.DateTime date, System.Guid idUser);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/AddPhoto", ReplyAction="http://tempuri.org/InterfacePhoto/AddPhotoResponse")]
    System.Threading.Tasks.Task AddPhotoAsync(string name, string location, string description, string path, System.DateTime date, System.Guid idUser);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUserById", ReplyAction="http://tempuri.org/InterfaceUser/GetUserByIdResponse")]
    MyPhotos.User GetUserById(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUserById", ReplyAction="http://tempuri.org/InterfaceUser/GetUserByIdResponse")]
    System.Threading.Tasks.Task<MyPhotos.User> GetUserByIdAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUsers", ReplyAction="http://tempuri.org/InterfaceUser/GetUsersResponse")]
    MyPhotos.User[] GetUsers();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUsers", ReplyAction="http://tempuri.org/InterfaceUser/GetUsersResponse")]
    System.Threading.Tasks.Task<MyPhotos.User[]> GetUsersAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/DeleteUser", ReplyAction="http://tempuri.org/InterfaceUser/DeleteUserResponse")]
    bool DeleteUser(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/DeleteUser", ReplyAction="http://tempuri.org/InterfaceUser/DeleteUserResponse")]
    System.Threading.Tasks.Task<bool> DeleteUserAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/UpdateUser", ReplyAction="http://tempuri.org/InterfaceUser/UpdateUserResponse")]
    void UpdateUser(System.Guid id, string firstName, string lastName, string email, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/UpdateUser", ReplyAction="http://tempuri.org/InterfaceUser/UpdateUserResponse")]
    System.Threading.Tasks.Task UpdateUserAsync(System.Guid id, string firstName, string lastName, string email, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/Register", ReplyAction="http://tempuri.org/InterfaceUser/RegisterResponse")]
    void Register(string firstName, string lastName, string email, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/Register", ReplyAction="http://tempuri.org/InterfaceUser/RegisterResponse")]
    System.Threading.Tasks.Task RegisterAsync(string firstName, string lastName, string email, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/Login", ReplyAction="http://tempuri.org/InterfaceUser/LoginResponse")]
    System.Guid Login(string email, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/Login", ReplyAction="http://tempuri.org/InterfaceUser/LoginResponse")]
    System.Threading.Tasks.Task<System.Guid> LoginAsync(string email, string password);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMyPhotosChannel : IMyPhotos, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MyPhotosClient : System.ServiceModel.ClientBase<IMyPhotos>, IMyPhotos
{
    
    public MyPhotosClient()
    {
    }
    
    public MyPhotosClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MyPhotosClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MyPhotosClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MyPhotosClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void UpdateFolder(System.Guid id, string name, string path, MyPhotos.Photo[] photos)
    {
        base.Channel.UpdateFolder(id, name, path, photos);
    }
    
    public System.Threading.Tasks.Task UpdateFolderAsync(System.Guid id, string name, string path, MyPhotos.Photo[] photos)
    {
        return base.Channel.UpdateFolderAsync(id, name, path, photos);
    }
    
    public bool DeleteFolder(System.Guid id)
    {
        return base.Channel.DeleteFolder(id);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteFolderAsync(System.Guid id)
    {
        return base.Channel.DeleteFolderAsync(id);
    }
    
    public MyPhotos.Folder[] GetFolders()
    {
        return base.Channel.GetFolders();
    }
    
    public System.Threading.Tasks.Task<MyPhotos.Folder[]> GetFoldersAsync()
    {
        return base.Channel.GetFoldersAsync();
    }
    
    public MyPhotos.Folder GetFolderById(System.Guid id)
    {
        return base.Channel.GetFolderById(id);
    }
    
    public System.Threading.Tasks.Task<MyPhotos.Folder> GetFolderByIdAsync(System.Guid id)
    {
        return base.Channel.GetFolderByIdAsync(id);
    }
    
    public MyPhotos.Photo GetPhotoById(System.Guid id)
    {
        return base.Channel.GetPhotoById(id);
    }
    
    public System.Threading.Tasks.Task<MyPhotos.Photo> GetPhotoByIdAsync(System.Guid id)
    {
        return base.Channel.GetPhotoByIdAsync(id);
    }
    
    public MyPhotos.Photo GetPhotoByName(string name)
    {
        return base.Channel.GetPhotoByName(name);
    }
    
    public System.Threading.Tasks.Task<MyPhotos.Photo> GetPhotoByNameAsync(string name)
    {
        return base.Channel.GetPhotoByNameAsync(name);
    }
    
    public System.Guid GetGuidByName(string name)
    {
        return base.Channel.GetGuidByName(name);
    }
    
    public System.Threading.Tasks.Task<System.Guid> GetGuidByNameAsync(string name)
    {
        return base.Channel.GetGuidByNameAsync(name);
    }
    
    public MyPhotos.Photo[] GetPhotos()
    {
        return base.Channel.GetPhotos();
    }
    
    public System.Threading.Tasks.Task<MyPhotos.Photo[]> GetPhotosAsync()
    {
        return base.Channel.GetPhotosAsync();
    }
    
    public bool DeletePhoto(System.Guid id)
    {
        return base.Channel.DeletePhoto(id);
    }
    
    public System.Threading.Tasks.Task<bool> DeletePhotoAsync(System.Guid id)
    {
        return base.Channel.DeletePhotoAsync(id);
    }
    
    public void UpdatePhoto(System.Guid id, string name, string location, string description, string path, System.DateTime date, MyPhotos.Folder[] folders)
    {
        base.Channel.UpdatePhoto(id, name, location, description, path, date, folders);
    }
    
    public System.Threading.Tasks.Task UpdatePhotoAsync(System.Guid id, string name, string location, string description, string path, System.DateTime date, MyPhotos.Folder[] folders)
    {
        return base.Channel.UpdatePhotoAsync(id, name, location, description, path, date, folders);
    }
    
    public void AddPhoto(string name, string location, string description, string path, System.DateTime date, System.Guid idUser)
    {
        base.Channel.AddPhoto(name, location, description, path, date, idUser);
    }
    
    public System.Threading.Tasks.Task AddPhotoAsync(string name, string location, string description, string path, System.DateTime date, System.Guid idUser)
    {
        return base.Channel.AddPhotoAsync(name, location, description, path, date, idUser);
    }
    
    public MyPhotos.User GetUserById(System.Guid id)
    {
        return base.Channel.GetUserById(id);
    }
    
    public System.Threading.Tasks.Task<MyPhotos.User> GetUserByIdAsync(System.Guid id)
    {
        return base.Channel.GetUserByIdAsync(id);
    }
    
    public MyPhotos.User[] GetUsers()
    {
        return base.Channel.GetUsers();
    }
    
    public System.Threading.Tasks.Task<MyPhotos.User[]> GetUsersAsync()
    {
        return base.Channel.GetUsersAsync();
    }
    
    public bool DeleteUser(System.Guid id)
    {
        return base.Channel.DeleteUser(id);
    }
    
    public System.Threading.Tasks.Task<bool> DeleteUserAsync(System.Guid id)
    {
        return base.Channel.DeleteUserAsync(id);
    }
    
    public void UpdateUser(System.Guid id, string firstName, string lastName, string email, string password)
    {
        base.Channel.UpdateUser(id, firstName, lastName, email, password);
    }
    
    public System.Threading.Tasks.Task UpdateUserAsync(System.Guid id, string firstName, string lastName, string email, string password)
    {
        return base.Channel.UpdateUserAsync(id, firstName, lastName, email, password);
    }
    
    public void Register(string firstName, string lastName, string email, string password)
    {
        base.Channel.Register(firstName, lastName, email, password);
    }
    
    public System.Threading.Tasks.Task RegisterAsync(string firstName, string lastName, string email, string password)
    {
        return base.Channel.RegisterAsync(firstName, lastName, email, password);
    }
    
    public System.Guid Login(string email, string password)
    {
        return base.Channel.Login(email, password);
    }
    
    public System.Threading.Tasks.Task<System.Guid> LoginAsync(string email, string password)
    {
        return base.Channel.LoginAsync(email, password);
    }
}
