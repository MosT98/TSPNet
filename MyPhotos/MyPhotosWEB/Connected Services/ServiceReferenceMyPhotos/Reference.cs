//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceMyPhotos
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos")]
    public partial class Photo : object
    {
        
        private System.DateTime DateField;
        
        private string DescriptionField;
        
        private string LocationField;
        
        private string NameField;
        
        private string PathField;
        
        private System.Guid PhotoIdField;
        
        private System.Guid UserUserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PhotoId
        {
            get
            {
                return this.PhotoIdField;
            }
            set
            {
                this.PhotoIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserUserId
        {
            get
            {
                return this.UserUserIdField;
            }
            set
            {
                this.UserUserIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Folder", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos")]
    public partial class Folder : object
    {
        
        private System.Guid FolderIdField;
        
        private string NameField;
        
        private string PathField;
        
        private System.Guid UserUserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FolderId
        {
            get
            {
                return this.FolderIdField;
            }
            set
            {
                this.FolderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserUserId
        {
            get
            {
                return this.UserUserIdField;
            }
            set
            {
                this.UserUserIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos")]
    public partial class User : object
    {
        
        private string EmailField;
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private string PasswordField;
        
        private System.Guid UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId
        {
            get
            {
                return this.UserIdField;
            }
            set
            {
                this.UserIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceMyPhotos.IMyPhotos")]
    public interface IMyPhotos
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/UpdateFolder", ReplyAction="http://tempuri.org/InterfaceFolder/UpdateFolderResponse")]
        System.Threading.Tasks.Task UpdateFolderAsync(System.Guid id, string name, string path, System.Collections.Generic.List<ServiceReferenceMyPhotos.Photo> photos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/DeleteFolder", ReplyAction="http://tempuri.org/InterfaceFolder/DeleteFolderResponse")]
        System.Threading.Tasks.Task<bool> DeleteFolderAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/GetFolders", ReplyAction="http://tempuri.org/InterfaceFolder/GetFoldersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMyPhotos.Folder>> GetFoldersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceFolder/GetFolderById", ReplyAction="http://tempuri.org/InterfaceFolder/GetFolderByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMyPhotos.Folder> GetFolderByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotoById", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotoByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMyPhotos.Photo> GetPhotoByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotoByName", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotoByNameResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMyPhotos.Photo> GetPhotoByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetGuidByName", ReplyAction="http://tempuri.org/InterfacePhoto/GetGuidByNameResponse")]
        System.Threading.Tasks.Task<System.Guid> GetGuidByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotos", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotosResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMyPhotos.Photo>> GetPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/DeletePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/DeletePhotoResponse")]
        System.Threading.Tasks.Task<bool> DeletePhotoAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/UpdatePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/UpdatePhotoResponse")]
        System.Threading.Tasks.Task UpdatePhotoAsync(System.Guid id, string name, string location, string description, string path, System.DateTime date, System.Collections.Generic.List<ServiceReferenceMyPhotos.Folder> folders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/AddPhoto", ReplyAction="http://tempuri.org/InterfacePhoto/AddPhotoResponse")]
        System.Threading.Tasks.Task AddPhotoAsync(string name, string location, string description, string path, System.DateTime date, System.Guid idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUserById", ReplyAction="http://tempuri.org/InterfaceUser/GetUserByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMyPhotos.User> GetUserByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUsers", ReplyAction="http://tempuri.org/InterfaceUser/GetUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMyPhotos.User>> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/DeleteUser", ReplyAction="http://tempuri.org/InterfaceUser/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/UpdateUser", ReplyAction="http://tempuri.org/InterfaceUser/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(System.Guid id, string firstName, string lastName, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/Register", ReplyAction="http://tempuri.org/InterfaceUser/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string firstName, string lastName, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/Login", ReplyAction="http://tempuri.org/InterfaceUser/LoginResponse")]
        System.Threading.Tasks.Task<System.Guid> LoginAsync(string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IMyPhotosChannel : ServiceReferenceMyPhotos.IMyPhotos, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MyPhotosClient : System.ServiceModel.ClientBase<ServiceReferenceMyPhotos.IMyPhotos>, ServiceReferenceMyPhotos.IMyPhotos
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MyPhotosClient() : 
                base(MyPhotosClient.GetDefaultBinding(), MyPhotosClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMyPhotos.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyPhotosClient(EndpointConfiguration endpointConfiguration) : 
                base(MyPhotosClient.GetBindingForEndpoint(endpointConfiguration), MyPhotosClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyPhotosClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MyPhotosClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyPhotosClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MyPhotosClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyPhotosClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task UpdateFolderAsync(System.Guid id, string name, string path, System.Collections.Generic.List<ServiceReferenceMyPhotos.Photo> photos)
        {
            return base.Channel.UpdateFolderAsync(id, name, path, photos);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFolderAsync(System.Guid id)
        {
            return base.Channel.DeleteFolderAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMyPhotos.Folder>> GetFoldersAsync()
        {
            return base.Channel.GetFoldersAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMyPhotos.Folder> GetFolderByIdAsync(System.Guid id)
        {
            return base.Channel.GetFolderByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMyPhotos.Photo> GetPhotoByIdAsync(System.Guid id)
        {
            return base.Channel.GetPhotoByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMyPhotos.Photo> GetPhotoByNameAsync(string name)
        {
            return base.Channel.GetPhotoByNameAsync(name);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetGuidByNameAsync(string name)
        {
            return base.Channel.GetGuidByNameAsync(name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMyPhotos.Photo>> GetPhotosAsync()
        {
            return base.Channel.GetPhotosAsync();
        }
        
        public System.Threading.Tasks.Task<bool> DeletePhotoAsync(System.Guid id)
        {
            return base.Channel.DeletePhotoAsync(id);
        }
        
        public System.Threading.Tasks.Task UpdatePhotoAsync(System.Guid id, string name, string location, string description, string path, System.DateTime date, System.Collections.Generic.List<ServiceReferenceMyPhotos.Folder> folders)
        {
            return base.Channel.UpdatePhotoAsync(id, name, location, description, path, date, folders);
        }
        
        public System.Threading.Tasks.Task AddPhotoAsync(string name, string location, string description, string path, System.DateTime date, System.Guid idUser)
        {
            return base.Channel.AddPhotoAsync(name, location, description, path, date, idUser);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMyPhotos.User> GetUserByIdAsync(System.Guid id)
        {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferenceMyPhotos.User>> GetUsersAsync()
        {
            return base.Channel.GetUsersAsync();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(System.Guid id)
        {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(System.Guid id, string firstName, string lastName, string email, string password)
        {
            return base.Channel.UpdateUserAsync(id, firstName, lastName, email, password);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string firstName, string lastName, string email, string password)
        {
            return base.Channel.RegisterAsync(firstName, lastName, email, password);
        }
        
        public System.Threading.Tasks.Task<System.Guid> LoginAsync(string email, string password)
        {
            return base.Channel.LoginAsync(email, password);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMyPhotos))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMyPhotos))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MyPhotosClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMyPhotos);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MyPhotosClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMyPhotos);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMyPhotos,
        }
    }
}
